package msc.pizza4you.gui.panels;

import javax.swing.JCheckBox;
import javax.swing.JPanel;
import msc.pizza4you.data.IngredientDetails;
import msc.pizza4you.data.PizzaConfiguration;
import msc.pizza4you.core.Engine;

/**
 *
 * @author Keshan De Silva
 */
public class IngredientSelectionPanel extends AbstractPanel
{
    private final JCheckBox[] nonVegiSelections;
    
    public IngredientSelectionPanel()
    {
        initComponents();
        nonVegiSelections = new JCheckBox[]
        {
            chkChicken, chkFish, chkMutton, chkBeef, chkPrawn
        };
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnGroupSouce = new javax.swing.ButtonGroup();
        panelBorder = new javax.swing.JPanel();
        radioNonVegetarian = new javax.swing.JRadioButton();
        radioVegetarian = new javax.swing.JRadioButton();
        chkChicken = new javax.swing.JCheckBox();
        chkMutton = new javax.swing.JCheckBox();
        chkFish = new javax.swing.JCheckBox();
        chkPrawn = new javax.swing.JCheckBox();
        chkBeef = new javax.swing.JCheckBox();
        panelKeywords = new javax.swing.JPanel();

        panelBorder.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main Ingredient Selection", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        btnGroupSouce.add(radioNonVegetarian);
        radioNonVegetarian.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        radioNonVegetarian.setSelected(true);
        radioNonVegetarian.setText("I am Non Vegetarian");
        radioNonVegetarian.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radioNonVegetarianActionPerformed(evt);
            }
        });

        btnGroupSouce.add(radioVegetarian);
        radioVegetarian.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        radioVegetarian.setText("I am Vegetarian");
        radioVegetarian.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radioVegetarianActionPerformed(evt);
            }
        });

        chkChicken.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkChicken.setSelected(true);
        chkChicken.setText("Chicken");
        chkChicken.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkChickenActionPerformed(evt);
            }
        });

        chkMutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkMutton.setSelected(true);
        chkMutton.setText("Mutton");
        chkMutton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkMuttonActionPerformed(evt);
            }
        });

        chkFish.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkFish.setSelected(true);
        chkFish.setText("Fish");
        chkFish.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkFishActionPerformed(evt);
            }
        });

        chkPrawn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkPrawn.setSelected(true);
        chkPrawn.setText("Prawn");
        chkPrawn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkPrawnActionPerformed(evt);
            }
        });

        chkBeef.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkBeef.setSelected(true);
        chkBeef.setText("Beef");
        chkBeef.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkBeefActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBorderLayout = new javax.swing.GroupLayout(panelBorder);
        panelBorder.setLayout(panelBorderLayout);
        panelBorderLayout.setHorizontalGroup(
            panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioNonVegetarian)
                    .addComponent(radioVegetarian)
                    .addGroup(panelBorderLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkBeef)
                            .addGroup(panelBorderLayout.createSequentialGroup()
                                .addGroup(panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkChicken)
                                    .addComponent(chkMutton))
                                .addGap(49, 49, 49)
                                .addGroup(panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkPrawn)
                                    .addComponent(chkFish))))))
                .addContainerGap(278, Short.MAX_VALUE))
        );

        panelBorderLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {radioNonVegetarian, radioVegetarian});

        panelBorderLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {chkBeef, chkChicken, chkMutton});

        panelBorderLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {chkFish, chkPrawn});

        panelBorderLayout.setVerticalGroup(
            panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorderLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(radioVegetarian)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioNonVegetarian)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkChicken)
                    .addComponent(chkFish))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMutton)
                    .addComponent(chkPrawn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkBeef)
                .addContainerGap())
        );

        panelBorderLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {radioNonVegetarian, radioVegetarian});

        panelKeywords.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ingredients Details", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelKeywords.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelKeywords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBorder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelKeywords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radioVegetarianActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioVegetarianActionPerformed
    {//GEN-HEADEREND:event_radioVegetarianActionPerformed
        for (JCheckBox checkBox : nonVegiSelections)
        {
            checkBox.setSelected(false);
            checkBox.setEnabled(false);
        }
        
        updateKeywords();
    }//GEN-LAST:event_radioVegetarianActionPerformed

    private void radioNonVegetarianActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioNonVegetarianActionPerformed
    {//GEN-HEADEREND:event_radioNonVegetarianActionPerformed
        for (JCheckBox checkBox : nonVegiSelections)
        {
            checkBox.setSelected(true);
            checkBox.setEnabled(true);
        }
        
        updateKeywords();
    }//GEN-LAST:event_radioNonVegetarianActionPerformed

    private void chkChickenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkChickenActionPerformed
    {//GEN-HEADEREND:event_chkChickenActionPerformed
        updateKeywords();
    }//GEN-LAST:event_chkChickenActionPerformed

    private void chkMuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkMuttonActionPerformed
    {//GEN-HEADEREND:event_chkMuttonActionPerformed
        updateKeywords();
    }//GEN-LAST:event_chkMuttonActionPerformed

    private void chkBeefActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkBeefActionPerformed
    {//GEN-HEADEREND:event_chkBeefActionPerformed
        updateKeywords();
    }//GEN-LAST:event_chkBeefActionPerformed

    private void chkFishActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkFishActionPerformed
    {//GEN-HEADEREND:event_chkFishActionPerformed
        updateKeywords();
    }//GEN-LAST:event_chkFishActionPerformed

    private void chkPrawnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkPrawnActionPerformed
    {//GEN-HEADEREND:event_chkPrawnActionPerformed
        updateKeywords();
    }//GEN-LAST:event_chkPrawnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupSouce;
    private javax.swing.JCheckBox chkBeef;
    private javax.swing.JCheckBox chkChicken;
    private javax.swing.JCheckBox chkFish;
    private javax.swing.JCheckBox chkMutton;
    private javax.swing.JCheckBox chkPrawn;
    private javax.swing.JPanel panelBorder;
    private javax.swing.JPanel panelKeywords;
    private javax.swing.JRadioButton radioNonVegetarian;
    private javax.swing.JRadioButton radioVegetarian;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getPanelTitle()
    {
        return "Main Ingredient Selection";
    }
    
    @Override
    public PizzaConfiguration updatePizzaConfigurations()
    {
        Engine engine = Engine.getInstance();
        PizzaConfiguration pizzaConfiguration = engine.getPizzaConfiguration();
        IngredientDetails ingredientDetails = new IngredientDetails();
        
        if (radioVegetarian.isSelected())
        {
            ingredientDetails.clearIngredientTypes();
        }
        else if (radioNonVegetarian.isSelected())
        {
            if (chkChicken.isSelected())
            {
                ingredientDetails.addIngredientType(IngredientDetails.IngredientType.CHICKEN);
            }
            if (chkMutton.isSelected())
            {
                ingredientDetails.addIngredientType(IngredientDetails.IngredientType.MUTTON);
            }
            if (chkBeef.isSelected())
            {
                ingredientDetails.addIngredientType(IngredientDetails.IngredientType.BEEF);
            }
            if (chkFish.isSelected())
            {
                ingredientDetails.addIngredientType(IngredientDetails.IngredientType.FISH);
            }
            if (chkPrawn.isSelected())
            {
                ingredientDetails.addIngredientType(IngredientDetails.IngredientType.PRAWN);
            }
        }
        
        pizzaConfiguration.setIngredientDetails(ingredientDetails);
        return pizzaConfiguration;
    }
    
    @Override
    public JPanel getKeywordPanel()
    {
        return panelKeywords;
    }
}
